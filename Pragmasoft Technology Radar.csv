name,ring,quadrant,isNew,description
D3,adopt,tools,TRUE,"<a href=""https://d3js.org/"">D3</a> has helped us substantially in developing live charts and summaries sourced directly from operational stores. It complements products like <strong>Tableau</strong> which serve the purpose of fully-fledged visualizations of Data Warehouse data. "
Git,adopt,tools,TRUE,"Git has been a prevalent SCM tool we apply for all our projects. We add it here just for a further reference."
GitHub,adopt,tools,TRUE,"We only quite recently entered OSS world with <a href=""https://github.com/pragmasoft-pl"">our organization account</a>. It is primarily used now as CMS for <a href=""https://github.com/pragmasoft-pl/pragmasoft-pl.github.io"">our company blog</a> and this radar."
GitLab,adopt,tools,TRUE,"<a href=""https://about.gitlab.com/"">GitLab</a> combines many pieces we utilize for software development on a daily basis. Be it backlog management, SCM, code reviews, CI/CD, monitoring, etc. - we do it all in a single tool and that boosts our productivity heavily."
Gulp,adopt,tools,TRUE,"It has been a while since <a href=""https://gulpjs.com/"">Gulp</a> is with us and helps us in many automation tasks. We put it here for reference."
SonarQube,adopt,tools,TRUE,"<a href=""https://www.sonarqube.org/"">Sonar</a> helps us control quality of software we produce. One cannot control something they do not measure. That is why we utilize various code metrics Sonar provides to harness tech debt that creeps in on a daily basis."
Dapper,trial,tools,TRUE,"When a .NET project does not expose complex domain or it is not quite CRUD, we prefer not to enter <strong>ORM</strong> world then. Our preference is then a micro-ORM <a href=""https://github.com/StackExchange/Dapper"">Dapper</a> is a solid example of. "
Hangfire,trial,tools,TRUE,"One of our .NET projects heavily leveraged <a href=""https://www.hangfire.io/"">Hangfire</a> for long-running scheduled background jobs. Ease of use and low amount of code we needed encouranged us to start considering it in other .NET projects."
PSake,trial,tools,TRUE,"Part of our automation in .NET projects are not focused on programming in XML and diverges towards <strong>PowerShell</strong> flavour. We see <a href=""https://github.com/psake/psake"">PSake</a> as a complimentary tool whenever there is lots of customization to scripting build of project artifacts."
Splunk,trial,tools,TRUE,"With the advent of cheap storage we prefer to store events (be it exceptions, event logs, domain events, etc.) that form the foundation for further problem root cause analysis. <a href=""https://www.splunk.com/"">Splunk</a> also supports well our technique of <strong>Algorithmic IT operations</strong> due to its powerful indexing, query and visualization capabilities."
Yarn,trial,tools,TRUE,"<a href=""https://yarnpkg.com"">Yarn</a> has started gradually replacing <strong>NPM</strong> in our dependency management automation (especially in front-end focused projects)."
Visual Studio Code,trial,tools,TRUE,"We started edit single files in <strong>Notepad++</strong> for big projects when Visual Studio choked. But we have been amazed how <a href=""https://code.visualstudio.com/"">VS Code</a> started gaining community support, rich set of extensions, speed and stability. For some of us it has been an editor of choice that replaced previous tools."
Swashbuckle (Swagger) for .NET Core,trial,tools,TRUE,"Adopting RESTful APIs and treating them as products requires proper contract exposure with documentation. <a href=""http://github.com/domaindrivendev/Swashbuckle.AspNetCore"">Swashbuckle for .NET Core</a> takes care of producing <strong>living API doc</strong> automatically leveraging API code. Testers admit <strong>Swagger</strong> helps a lot in API testing and exploration too."
Jekyll,assess,tools,TRUE,"When it comes to documentation - we love <strong>Markdown</strong> and keeping things as code in a Git repository. <a href=""https://jekyllrb.com/"">Jekyll</a> helps here a lot. Together with rich ecosystem of templates, one can easily setup their blog, as we did for <a href=""https://github.com/pragmasoft-pl/pragmasoft-pl.github.io"">our company blog</a>."
Roslyn,assess,tools,TRUE,"Since Microsoft reworked C#/VB compilers into a language compilation platform <a href=""https://github.com/dotnet/roslyn"">Roslyn</a>, we started leveraging its capabilities for company policy static code analysis. This has been a great companion for code reviews which saved us time and money."
Advanced analytics,adopt,techniques,TRUE,"Our AI/ML team has extended the company approach to enterprise analytics by incorporating deep learning techniques. Making good use of <strong>neural networks</strong>, a couple of Python libraries and <a href=""https://www.tensorflow.org/"">TensorFlow</a> led us to creation of models that increase revenue for our customers."
Automated build pipeline,adopt,techniques,TRUE,"This comes as a natural choice if you have your build automated with e.g. scripts. It then opens further benefits of CI/CD advantage. One needs to be careful though to avoid <strong>lots of programming in CI tool</strong> which is discouraged."
Automated database deployment,adopt,techniques,TRUE,"Database versioning and deployment play a vital part in fast and reliable delivery. Oftentimes DB schema needs to keep backward compatibility and only 'DB version up' semantics is automated (no downgrade available at hand). For more sophisticated scenarios we consider tools like <a href=""https://www.liquibase.org/"">LiquiBase</a>."
Automated deployment pipeline,adopt,techniques,TRUE,"Automated build does not mean automatic deployment. We strive to have 100% projects automatically deployed to test/staging environments, but things are not that easy with production systems. We gradually automate even production pipelines but artifacts handover still occurs."
Continuous Integration,adopt,techniques,TRUE,"We try to avoid long running feature branches, but even if we have one, we make sure it is sourced with its dependencies and master branch often. In particular, <a href=""https://www.jetbrains.com/teamcity/"">TeamCity</a> helps here a lot."
Decoupling deployment from release,adopt,techniques,TRUE,"Landing code in production does not necessarily mean it is open for wide use for every single user. Leveraging feature toggles, experimental features, pilots we can afford putting only a part of functionality and check if system is still healthy. "
Decoupling secret management from source code,adopt,techniques,TRUE,"Keeping secrets like passwords, api keys, sensitive authorization tokens in source code repository is not an option for any serious application. Thankfully, modern CI/CD/Cloud tools provide secure storages like <strong>GitLab secret variables</strong> or <a href=""https://aws.amazon.com/secrets-manager/"">AWS Secret Manager</a>."
Health check pages,adopt,techniques,TRUE,"With the shift for <strong>microservices</strong> we see the huge need for detailed status information announced by our live systems. This can help build and visualize infrastructure graphs which quickly show places requiring our attention. This is of vital importance each time we rollout new versions. "
Products over projects,adopt,techniques,TRUE,"Product oriented approach is what we love. Oftentimes software requirements are not detailed enough and then development team steps in. We try to understand current features adoption, what business problems users have and even change the initial proposal. Whatever the final result is it helps us <strong>think product-wise</strong> which improves both development speed and software quality."
Tech debt control,adopt,techniques,TRUE,"Technical debt can creep in in many ways (see Martin Fowler's <a href=""https://martinfowler.com/bliki/TechnicalDebtQuadrant.html"">quadrant</a>). Some of them are reasonable and when controlled, one can harness overall quality of a software project. Tools like <strong>SonarQube</strong> help substantially in such fine-grained control."
Algorithmic IT operations,trial,techniques,TRUE,"This technique stems from storing all possible events that come from live systems. Then operation departments can perform advanced queries and visualize data to answer questions they otherwise need to ask against living production systems. This is much safer and cheaper. "
Content Security Policies,trial,techniques,TRUE,"When introduced, <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"">CSP</a> brought a simple and effective option to the security table. We have been assessing how it would impact our security handling of various kind of attacks and we apply this technique where it helps mitigate risks."
Continuous Deployment,trial,techniques,TRUE,"If a commit to the repository means also automatic delivery in approx. 1-2 mins to e.g. test environment, then all you need to do is formulate a commit message and push. If combined with instant notifications for interested people (e.g. team members) then time savings and noise reduction level is high. However one need to have sharp tools (e.g. <strong>GitLab Auto DevOps</strong> or <strong>Kubernetes</strong>) and reliable procedure to orchestrate automatic deployment to production. We have been progressing towards this direction."
Datensparsamkeit,trial,techniques,TRUE,"Knowing much about our users is in general beneficial, but knowing too much personal data adds risks and costs (especially when <strong>GDPR</strong> came into life). <a href=""https://martinfowler.com/bliki/Datensparsamkeit.html"">Datensparsamkeit</a> encourages us to store personal data only when we must. We often propose 3rd party Identity Management Systems we then trust with <strong>OAuth</strong>/<strong>OpenID</strong>/<strong>SAML</strong>."
Development cycle analytics,trial,techniques,TRUE,"Since early 2000's we have seen the advent of agile/lean/scrum/kanban/etc., each aiming at improving work organization and eventually making software development a predictable and efficient effort. But to draw right conclusions and get closer to the goal we all should make use of hard evidence. Measuring time a unit of work spent in each development stage we can control how we are in fact doing. And this is a good starting point."
Log aggregation & indexing,trial,techniques,TRUE,"Combining logs from various production systems may open new paths for enterprise analysis. Be it domain events, code exceptions/failures or security incidents, if put together, they may be utilized to gather intelligence data and have great impact on revenue or quality of engineering. Tools like <strong>Splunk</strong> help here a lot."
Microservices,trial,techniques,TRUE,"<a href=""https://martinfowler.com/articles/microservices.html"">Microservices</a> allure is hard to resist as it brings plenty of benefits. At the same time it requires tons of new kind of engineering wisdom and practice. The ecosystem of tools, platforms and patterns has been expanding rapidly. Many have jumped onto this bandwagon, many succeeded and many were defeated. Thus it is also extremely easy to fall into the envy trap and fail heavily. We approach this paradigm shift carefully, always trying to find the best fit."
APIs as a product,assess,techniques,TRUE,"Many times we are amazed at the quality of services of big vendors (like Google/Amazon/Microsoft/etc.): APIs/libraries/dashboards/etc. prepared with care, with tons of detailed reading materials. Sometimes it is worth to treat other teams as production-quality users of APIs/libraries/artifacts our team produces internally. This is some investment but we see in longer runs it pays off greatly (less bugs, APIs more tailored to the actual needs, high team motivation and proactive attitude)."
Build your own radar,assess,techniques,TRUE,"Pragmasoft follows <a href=""https://www.thoughtworks.com/insights/blog/build-your-own-technology-radar"">Build your own radar</a> recommendation of <a href=""https://www.thoughtworks.com/"">ThoughWorks (tm)</a>. We see a big value in it as it invites our developers to share what works for them and what not. Moreover, it aids us to compose a broader technology strategy and competence portfolio."
GitHub flow,assess,techniques,TRUE,"<a href=""https://guides.github.com/introduction/flow/"">GitHub flow</a> solves the problem of long-running feature branches, merge costs and big releases. Of course it brings at its own costs as it requires cutting edge engineering with mature <strong>Continuous Delivery</strong>, full-blown testing automation etc. The more complex system, the more investment it requires. For to get there, we have been assessing its potential and try to follow this trunk-based development approach where possible."
Lightweight Architecture Decision Records,assess,techniques,TRUE,"Keeping documentation close to code is always beneficial. Same is true for documenting architectural decisions that have long-term impact on the system/codebase. Be it in commit messages, changelogs or dedicated markdown pages - when it remains in the same code repository one can easily lookup the history for specific decisions. And understand the system better."
OWASP ASVS,assess,techniques,TRUE,"<strong>OWASP</strong> always brings <a href=""https://www.owasp.org/images/6/67/OWASPApplicationSecurityVerificationStandard3.0.pdf"">top security concerns in a distilled form</a> for each developer to learn by heart. This document is of no excuse. Not everyone developer is a security expert, but everyone should read at least minimum chunk, especially if provided on a golden plate by an esteemed party."
Anemic REST,hold,techniques,TRUE,"There are several stages at which designing REST can fail. Only few leverages its full potential. According to <a href=""https://martinfowler.com/articles/richardsonMaturityModel.html"">REST Maturity model</a> it is essential to shape API as resources upon which requests can act with proper verbs and data. And this is what we strive to achieve."
Gitflow,hold,techniques,TRUE,"In the early days of <strong>Git</strong> it lured its adopters to ease of branching model. Many of us followed and created lots of features branches. Then merging nightmares started. Together with heavy releases. We have been gradually abandoning fat-feature-branches technique towards more trunk-based development practices like <strong>GitHub flow</strong>."
Programming in CI/CD tool,hold,techniques,TRUE,"Tools like <a href=""https://www.jetbrains.com/teamcity/"">TeamCity</a> or <a href=""https://about.gitlab.com/"">GitLab CI</a> offer plenty of customization points. It is easy to make shortcuts and put automation script code directly into CI visual controls. But then we risk of loosing potential reuse and locking ourselves down in the CI product. Instead, we prefer standalone, reusable scripts that can be parameterized to run both locally and on CI servers as well."
.NET Core,adopt,platforms,TRUE,"We have created a bunch of microservices fuelled by .NET Core and at the same time the platform got matured enough with libraries and tooling etc. We see it as .NET default for any new projects."
AWS,adopt,platforms,TRUE,"It has been long time since <a href=""https://aws.amazon.com/"">Amazon Web Services</a> changed cloud services world. We make use of their services whenever it pays off."
Redis,adopt,platforms,TRUE,"Seeing <a href=""https://redis.io/"">Redis</a> in action as a distributed cache drives us into conclusion that it is generally good choice when distributed cache is needed. We can focus on how to solve <strong>this particular caching scenario</strong> instead of how to do it technically."
Azure,trial,platforms,TRUE,"Microsoft has matured its <a href=""https://azure.microsoft.com"">cloud services offering</a> and after assessing period we started considering it for our projects."
Docker,trial,platforms,TRUE,"Containerization paradigm shift led us to rethinking how we shape microservices. As for now we leverage <a href=""https://www.docker.com/"">Docker</a> in several projects to save on infrastructure maintenance and operations cost."
Elastic Search,trial,platforms,TRUE,"Full-text search engines bring us an option to offer advanced indexing and efficient querying. <a href=""https://www.elastic.co/products/elasticsearch"">ElasticSearch</a> is always a strong candidate in our considerations."
MariaDB,trial,platforms,TRUE,"We make heavy use of <strong>MySQL DB</strong>, but after it was forked as <a href=""https://mariadb.org/"">MariaDB</a> we started relying on that and upgraded production systems. We believe that open source community will continue putting heart and quality to it as through all the past years."
MongoDB,trial,platforms,TRUE,"<a href=""https://www.mongodb.com/"">MongoDB</a> got matured enough to be considered a strong option for <strong>NoSQL</strong> document systems. But still - we think carefully and apply it if and only if NoSQL approach is applicable in a given use case."
OpenID Connect,trial,platforms,TRUE,"Storing credentials on premises is risky. Many times it occurs it safe and cheap to rely on 3rd party identity management. The flagship <a href=""http://openid.net/connect/"">OpenID Connect</a> (a successor of <a href=""https://oauth.net/"">OAuth</a>) continues to focus our attention when such decoupling is justified."
General purpose computing on GPU,assess,platforms,TRUE,"Our recent research and development has been focusing on effectively train and use deep learning models. What traditional CPU would complete in days, we can get in minutes by making use of GPU and specialized libraries."
Kubernetes,assess,platforms,TRUE,"Entering containerization and microservices naturally led us towards exploration of container cluster managers. A solid pick is <a href=""https://kubernetes.io/"">Kubernetes</a> which started <a href=""https://blogs.dxc.technology/2017/11/01/for-cloud-container-orchestration-its-all-kubernetes-all-the-time/"">outperform its competition</a> recently."
Rancher,assess,platforms,TRUE,"For one project we made heavy use of <a href=""https://rancher.com/"">Rancher</a> which helped us harness microservices. Now it makes extensive use of <strong>Kubernetes</strong> foundation which places it in a good position the future."
C# 7.*,adopt,languages and frameworks,TRUE,"Since the advent of <strong>Roslyn</strong> and major C# compiler rework, everyone can observe a rapid pace of C# language development. It has embraced many little improvements released often. We welcome them early as C# design is generally backward compatible and upgrades are painless most of times."
Jasmine paired with Node.js,adopt,languages and frameworks,TRUE,"Testing JavaScript is not that easy if you couple client-side views with models. Thankfully, having <a href=""https://jasmine.github.io/"">Jasmine</a> onboard for automation we can save time to think and design carefully."
React.js,adopt,languages and frameworks,TRUE,"Many jumped onto the <a href=""https://reactjs.org/"">React</a> wagon and it just worked for them. Strong community, rich ecosystem of extensions, programming model and many front-end professionals who have already learnt it encourages us to follow."
SASS SCSS LESS,adopt,languages and frameworks,TRUE,"Nobody wants to repeat themselves. Especially if the goal is to tame the wilderness of CSS in big applications. <strong>CSS preprocessors</strong> keep our code clean and manageable."
Spring Boot,adopt,languages and frameworks,TRUE,"We often favour simplicity and convention over fully-fledged (but time consuming to configure) solutions when it comes to frameworks. That is why we so often consider <a href=""http://spring.io/projects/spring-boot"">Spring Boot</a> for our Java/Spring applications."
Typescript,adopt,languages and frameworks,TRUE,"We use <strong>TypeScript</strong> a lot since its early days. It greatly helps driving our front-ends towards both quality and deadlines. Here we add it purely for reference reasons."
Angular,trial,languages and frameworks,TRUE,"Having plethora of front-end framework choices we generally pick <a href=""https://angular.io/"">Angular</a> for enterprise applications if people are already familiar with Angular world and long-term support is of prime importance."
React Native,trial,languages and frameworks,TRUE,"Developing mobile in <a href=""https://facebook.github.io/react-native/"">React Native</a> allows us to stay JavaScript, make use of UI components and native code libraries easily."
GraphQL,assess,languages and frameworks,TRUE,"Making decision on how to expose enterprise data over the web channels is always hard (big consequences). Be it <strong>REST</strong>, <strong>OData</strong> or <a href=""https://graphql.org/learn/"">GraphQL</a> - each has its potential and pitfalls. And we need to know them when making judgement."
AngularJS,hold,languages and frameworks,TRUE,"Developing one project in <a href=""https://angularjs.org/"">AngularJS</a> we experienced its all limitations. Thankfully they have been addressed in subsequent versions of <strong>Angular family</strong>."